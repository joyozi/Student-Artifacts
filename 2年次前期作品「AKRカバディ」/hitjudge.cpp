//◇-------------------------------------------------------------------------◇
//
//	hitjudgecppファイル[hitjudge.cpp]
//	AT12A271　当摩好弘
//
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//インクルードファイル
//◇-------------------------------------------------------------------------◇
#include "main.h"
#include "hitjudge.h"
#include "enemy.h"
#include "gakutyou.h"
#include "GamePlayer.h"

//◇-------------------------------------------------------------------------◇
//マクロ定義
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//プロトタイプ宣言
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//グローバル変数
//◇-------------------------------------------------------------------------◇
D3DXVECTOR3 h_ppos,h_epos;	//プレイヤーと敵の座標
D3DXVECTOR3 h_prot,h_erot;		//プレイヤーと敵の角度 D3DXVECTOR3なのはバグの原因かもしれないから
bool Gethitjudge;			//あたり判定の返す関数
int h_enum;

//◇-------------------------------------------------------------------------◇
//あたり判定初期化処理
//◇-------------------------------------------------------------------------◇
void InitHitJudge(void)
{

}

//◇---------------------------------◇
//あたり判定終了処理
//◇---------------------------------◇
void UninitHitJudge(void)
{

}
//◇---------------------------------◇
//あたり判定の更新処理
//◇---------------------------------◇
void UpdateHitJudge(void)
{
	static int moto;		//最低距離の変数
	static int now;			//現在の距離の変数

	//***x軸のあたり判定***

	//まず試しに角度を使わないあたり判定
	moto = sqrtf((PHITJUDGE_YOKOLONG - ENEMY_WIDTH) * (PHITJUDGE_YOKOLONG - ENEMY_WIDTH) + (PHITJUDGE_TATELONG - ENEMY_HEIGHT) + (PHITJUDGE_TATELONG - ENEMY_HEIGHT));

	now = sqrtf((h_ppos.x - h_epos.x) * (h_ppos.x - h_epos.x) + (h_ppos.y - h_epos.y) * (h_ppos.y - h_epos.y));

	//あたり判定の計算　最低距離のほうが長かったらfalse(当たってる。enemy/cppと同じ)
	if(moto >= now)
	{
		Gethitjudge = false;
	}
	else
	{
		Gethitjudge = true;
	}
}

//◇---------------------------------◇
//あたり判定の描画処理
//◇---------------------------------◇
void DrawHitJudge(void)
{
	
}

//◇---------------------------------◇
//プレイヤーからの情報取得処理
//
//p_pos プレイヤーの中心座標
//p_rot プレイヤーの角度
//
//◇---------------------------------◇
void SetHitJudge_Player(D3DXVECTOR3 p_pos,D3DXVECTOR3 p_rot)
{
	h_ppos.x = p_pos.x;
	h_ppos.y = p_pos.y;
	//.xと.yには同じ値が入っている。zにしておくのが最善 面倒
	h_prot.z = p_rot.x;
}
//◇---------------------------------◇
//敵からの情報取得処理
//
//e_pos 敵の中心座標
//e_rot 敵の角度
//e_num何番目の敵か
//
//◇---------------------------------◇
void SetHitJudge_Enemy(D3DXVECTOR3 e_pos,D3DXVECTOR3 e_rot,int e_num)
{
	h_epos.x = e_pos.x;
	h_epos.y = e_pos.y;
	//enemyでは角度がすべて.zに入っている
	h_erot.z = e_rot.z;
	h_enum = e_num;
}
//◇---------------------------------◇
//あたり判定の戻り値の処理
//◇---------------------------------◇
bool GetHitJudge(void)
{
	return Gethitjudge;
}

