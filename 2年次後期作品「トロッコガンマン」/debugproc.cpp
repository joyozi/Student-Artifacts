//◇-------------------------------------------------------------------------◇
//
//	File	:デバック情報表示ファイル[debugproc.cpp]
//	Author	:当摩好弘
//
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//インクルードファイル
//◇-------------------------------------------------------------------------◇
#include "main.h"
#include "debugproc.h"

#include <stdarg.h>
#include <stdio.h>

//◇-------------------------------------------------------------------------◇
//マクロ定義
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//プロトタイプ宣言
//◇-------------------------------------------------------------------------◇

//◇-------------------------------------------------------------------------◇
//グローバル変数
//◇-------------------------------------------------------------------------◇
LPD3DXFONT g_pD3DFont;		//いずれFPSもこの情報表示で表示させるからこっちでg_pD3DFontを使う
char g_aStrDebug[1024];

//◇-------------------------------------------------------------------------◇
//デバック情報初期化処理
//◇-------------------------------------------------------------------------◇
void Initdebugproc(void)
{
	D3DXCreateFont(GetDevice(),18,0,0,0,FALSE,SHIFTJIS_CHARSET,OUT_DEFAULT_PRECIS,DEFAULT_QUALITY,DEFAULT_PITCH,"Terminal",&g_pD3DFont);

	memset(&g_aStrDebug[0],0,sizeof g_aStrDebug);
}

//◇---------------------------------◇
//デバック情報終了処理
//◇---------------------------------◇
void Uninitdebugproc(void)
{
	if(g_pD3DFont != NULL)
	{
		g_pD3DFont->Release();
		g_pD3DFont = NULL;
	}
}
//◇---------------------------------◇
//デバック情報の更新処理
//◇---------------------------------◇
void Updatedebugproc(void)
{

}

//◇---------------------------------◇
//デバック情報の描画処理
//◇---------------------------------◇
void Drawdebugproc(void)
{
	RECT rect = {0,0,SCREEN_WIDTH,SCREEN_HEIGHT};

//	g_pD3DFont -> DrawText(NULL,&g_aStrDebug[0],-1,&rect,DT_LEFT,D3DCOLOR_RGBA(255,255,255,255));

}
//◇---------------------------------◇
//情報取得処理
//◇---------------------------------◇
void PrintDebugProc(char *fmt,...)
{
	/* 可変引数である関数を定義 */
	/*(指定された不定引数を全て表示する関数)*/
	va_list list;/* 定義するだけで値は設定しない */
	int i;
	char * cp;

	/* ①可変引数にアクセスする前の初期処理 */
	/* 第２引数に指定するargcは、vararg_func引数"..."の直ぐ左側でなければならない*/
	va_start( list ,  fmt );

	/* cpの文字列の長さが引数個数を意味し
	文字列の各文字がデータ型を意味する */
	for( cp=( char * )fmt , i=0 ; *cp != '\0'; cp++ , i++ ) 
	{
		if( *cp == 's' ) 
		{	/* char*型 */
			/* ②可変引数にアクセスしてその変数を取り出す処理 */
			/* 第２引数にchar*型を指定 */
			printf( "argv(%d)=%s\n" , i, va_arg( list , char * ));
		}

		else if( *cp == 'c' ) 
		{	/* char型 */
			/* ②可変引数にアクセスしてその変数を取り出す処理 */
			/* 第２引数にchar型を指定したい時はint型を指定した上でchar型にcastする */
			printf( "argv(%d)=%c\n" , i, ( char )va_arg( list , int ));
		}

		else if( *cp == 'd' )
		{ /* int型 */
			/* ②可変引数にアクセスしてその変数を取り出す処理 */
			/* 第２引数にint型を指定 */
			printf( "argv(%d)=%d\n" , i, va_arg( list , int ));
		}
	}
	/* ③可変引数にアクセスした後の終了処理 */
	va_end( list );

}
